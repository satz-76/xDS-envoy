#curl -X GET -i localhost:18000/get -H "rate-limit: No"  -H "Host: www.example.com"
package main

import (
	"context"
	"flag"
	"io"
	"net"
	"os"
	"os/signal"
	"strconv"
	"syscall"
	"time"

	core_v3 "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
	service_ext_proc_v3 "github.com/envoyproxy/go-control-plane/envoy/service/ext_proc/v3"
	envoy_type_v3 "github.com/envoyproxy/go-control-plane/envoy/type/v3"
	"github.com/solo-io/go-utils/log"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/health/grpc_health_v1"
	"google.golang.org/grpc/status"
)

var (
	grpcport = flag.String("grpcport", ":18080", "grpcport")
)


type server struct{}

type healthServer struct{}

func (s *healthServer) Check(ctx context.Context, in *grpc_health_v1.HealthCheckRequest) (*grpc_health_v1.HealthCheckResponse, error) {
	log.Printf("Handling grpc Check request: + %s", in.String())
	return &grpc_health_v1.HealthCheckResponse{Status: grpc_health_v1.HealthCheckResponse_SERVING}, nil
}

func (s *healthServer) Watch(in *grpc_health_v1.HealthCheckRequest, srv grpc_health_v1.Health_WatchServer) error {
	return status.Error(codes.Unimplemented, "Watch is not implemented")
}

func (s *server) Process(srv service_ext_proc_v3.ExternalProcessor_ProcessServer) error {
	log.Printf("Process")
	ctx := srv.Context()
	for {
		select {
		case <-ctx.Done():
			log.Printf("context done")
			return ctx.Err()
		default:
		}

		req, err := srv.Recv()
		if err == io.EOF {
			// envoy has closed the stream. Don't return anything and close this stream entirely
			return nil
		}
		if err != nil {
			return status.Errorf(codes.Unknown, "cannot receive stream request: %v", err)
		}
		h := req.Request.(*service_ext_proc_v3.ProcessingRequest_RequestHeaders)

		l_string := "No"

		for _, n := range h.RequestHeaders.Headers.Headers {
			if n.Key == "rate-limit" {
				l_string = string(n.RawValue)
			}
		}
		
		resp := &service_ext_proc_v3.ProcessingResponse{}

		if l_string == "Yes" { //rate-limited

			type MyStruct struct {
				Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
			}
			s := MyStruct{
				Value: "true", 
			}
			s1 := MyStruct{
				Value: strconv.Itoa(60-time.Now().Second()),
			}
			var addHeaders []*core_v3.HeaderValueOption
			addHeaders = append(addHeaders, &core_v3.HeaderValueOption{
					Header: &core_v3.HeaderValue{Key: "x-ratelimited", RawValue: []byte(s.Value)},
			})
			addHeaders = append(addHeaders, &core_v3.HeaderValueOption{
					Header: &core_v3.HeaderValue{Key: "x-ratelimit-reset", RawValue: []byte(s1.Value)},
			})			

			resp = &service_ext_proc_v3.ProcessingResponse{
				Response: &service_ext_proc_v3.ProcessingResponse_ImmediateResponse{
					ImmediateResponse: &service_ext_proc_v3.ImmediateResponse{
						Status:  &envoy_type_v3.HttpStatus{Code: 429},
						Headers: &service_ext_proc_v3.HeaderMutation{
							SetHeaders:    addHeaders,
						},
						Body:       "{ Rate Limit Exceeded }",
						GrpcStatus: nil,
						Details:    "",
					},
				},
			}
		}

		if err := srv.Send(resp); err != nil {
			log.Printf("send error %v", err)
			return err
		}

	}
}

func main() {

	flag.Parse()

	lis, err := net.Listen("tcp", *grpcport)
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}

	sopts := []grpc.ServerOption{grpc.MaxConcurrentStreams(1000)}
	s := grpc.NewServer(sopts...)

	service_ext_proc_v3.RegisterExternalProcessorServer(s, &server{})

	grpc_health_v1.RegisterHealthServer(s, &healthServer{})

	log.Printf("Starting gRPC server on port %s", *grpcport)

	var gracefulStop = make(chan os.Signal, 1)
	signal.Notify(gracefulStop, syscall.SIGTERM, syscall.SIGINT)
	go func() {
		sig := <-gracefulStop
		log.Printf("caught sig: %+v", sig)
		time.Sleep(time.Second)
		log.Printf("Graceful stop completed")
		os.Exit(0)
	}()
	err = s.Serve(lis)
	if err != nil {
		log.Fatalf("killing server with %v", err)
	}
}



