Certainly! Here's an example Dockerfile script for building an Envoy sidecar container for AWS ECS:

```Dockerfile
# Base image
FROM envoyproxy/envoy:v1.19.1

# Copy Envoy configuration file
COPY envoy.yaml /etc/envoy/envoy.yaml

# Expose Envoy ports
EXPOSE 8080

# Run Envoy with the specified configuration
CMD ["envoy", "-c", "/etc/envoy/envoy.yaml"]
```

In this Dockerfile, we start with the base image `envoyproxy/envoy:v1.19.1`, which provides a pre-built Envoy image. We then copy the `envoy.yaml` configuration file into the container's `/etc/envoy/` directory.

Here's an example `envoy.yaml` configuration file for an Envoy sidecar container:

```yaml
admin:
  access_log_path: /dev/null
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001

dynamic_resources:
  lds_config:
    ads: {}

  cds_config:
    ads: {}

static_resources:
  clusters:
    - name: xds_cluster
      connect_timeout: 1s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      http2_protocol_options: {}
      load_assignment:
        cluster_name: xds_cluster
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: <xds_server_address>
                      port_value: <xds_server_port>

listeners:
  - name: listener_0
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 8080
    filter_chains:
      - filters:
          - name: envoy.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: ingress_http
              route_config:
                name: local_route
                virtual_hosts:
                  - name: backend
                    domains:
                      - "*"
                    routes:
                      - match:
                          prefix: "/"
                        route:
                          cluster: xds_cluster
              http_filters:
                - name: envoy.router
```

In this `envoy.yaml` configuration, we define the Admin interface to listen on port 8001 and disable access logging. The `dynamic_resources` section is configured for dynamic configuration using the xDS management server.

The `static_resources` section defines the `xds_cluster`, specifying the address and port of the xDS management server.

The `listeners` section configures the listener on port 8080 and sets up the HTTP connection manager to handle incoming requests and route them to the `xds_cluster`.

Make sure to replace `<xds_server_address>` and `<xds_server_port>` in the `envoy.yaml` file with the actual address and port of your xDS management server.

Remember to customize the Envoy configuration further based on your specific requirements, such as adding additional filters, enabling TLS, or configuring advanced features.

Build the Docker image using the provided Dockerfile, and deploy it as a sidecar container in AWS ECS, ensuring proper networking configuration to allow communication between the application container and the Envoy sidecar container.