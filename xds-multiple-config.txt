To create an xDS management server in Go that uses multiple YAML configuration files from a directory and includes a watcher to detect adhoc changes to the YAML files, you can combine the `go-control-plane` library with the `viper` package for configuration management and the `fsnotify` package for file system event monitoring. Here's an example implementation:

```go
package main

import (
	"context"
	"log"
	"net"
	"os"
	"path/filepath"
	"strings"
	"sync"

	"github.com/fsnotify/fsnotify"
	"github.com/spf13/viper"
	"google.golang.org/grpc"

	"github.com/envoyproxy/go-control-plane/pkg/cache/v3"
	"github.com/envoyproxy/go-control-plane/pkg/server/v3"
	"github.com/envoyproxy/go-control-plane/pkg/util"
)

var (
	configDirectory = "configs" // Directory containing the YAML configuration files
)

func main() {
	// Create a cache instance
	cache := cache.NewSnapshotCache(false, cache.IDHash{}, nil)

	// Create a server instance
	server := v3.NewServer(context.Background(), cache, nil)

	// Start the gRPC server
	grpcServer := grpc.NewServer()
	util.RegisterServer(grpcServer, server)

	// Listen for incoming connections
	listener, err := net.Listen("tcp", ":8080")
	if err != nil {
		log.Fatalf("Failed to listen: %v", err)
	}

	// Start serving requests
	go func() {
		err = grpcServer.Serve(listener)
		if err != nil {
			log.Fatalf("Failed to serve: %v", err)
		}
	}()

	// Load initial configuration
	loadConfigurations(cache)

	// Watch for configuration changes
	go watchConfigurations(cache)

	log.Println("xDS management server started")

	// Wait for a termination signal to gracefully shutdown the server
	waitForTerminationSignal()
	grpcServer.GracefulStop()
}

// loadConfigurations loads the initial set of configurations from the YAML files in the config directory
func loadConfigurations(cache cache.SnapshotCache) {
	configFiles, err := getConfigFiles()
	if err != nil {
		log.Fatalf("Failed to get config files: %v", err)
	}

	for _, file := range configFiles {
		err := loadConfigurationFromFile(file, cache)
		if err != nil {
			log.Printf("Failed to load configuration from file %s: %v", file, err)
		}
	}
}

// watchConfigurations sets up a watcher to detect changes to the YAML files in the config directory
// and reloads the configurations when a change is detected
func watchConfigurations(cache cache.SnapshotCache) {
	watcher, err := fsnotify.NewWatcher()
	if err != nil {
		log.Fatalf("Failed to create watcher: %v", err)
	}
	defer watcher.Close()

	configFiles, err := getConfigFiles()
	if err != nil {
		log.Fatalf("Failed to get config files: %v", err)
	}

	var wg sync.WaitGroup
	wg.Add(1)

	go func() {
		defer wg.Done()

		for {
			select {
			case event, ok := <-watcher.Events:
				if !ok {
					return
				}

				if event.Op&fsnotify.Write == fsnotify.Write {
					if strings.HasSuffix(event.Name, ".yaml") || strings.HasSuffix(event.Name, ".yml") {
						log.Printf("Detected change in configuration file: %s", event.Name)
						err := loadConfigurationFromFile(event.Name, cache)
						if err != nil {
							log.Printf("Failed to load configuration from file %s: %v", event.Name, err)
						}
					}
				}
			case err

, ok := <-watcher.Errors:
				if !ok {
					return
				}

				log.Printf("Watcher error: %v", err)
			}
		}
	}()

	for _, file := range configFiles {
		err = watcher.Add(file)
		if err != nil {
			log.Printf("Failed to add file %s to watcher: %v", file, err)
		}
	}

	wg.Wait()
}

// getConfigFiles returns a list of YAML configuration files in the config directory
func getConfigFiles() ([]string, error) {
	files := make([]string, 0)

	err := filepath.Walk(configDirectory, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		if !info.IsDir() && (strings.HasSuffix(path, ".yaml") || strings.HasSuffix(path, ".yml")) {
			files = append(files, path)
		}

		return nil
	})

	return files, err
}

// loadConfigurationFromFile loads the configuration from a YAML file and updates the cache
func loadConfigurationFromFile(file string, cache cache.SnapshotCache) error {
	v := viper.New()
	v.SetConfigFile(file)

	if err := v.ReadInConfig(); err != nil {
		return err
	}

	snapshot := generateSnapshotFromViper(v)

	if err := cache.SetSnapshot(snapshot.NodeId, *snapshot); err != nil {
		return err
	}

	log.Printf("Configuration loaded from file: %s", file)
	return nil
}

// generateSnapshotFromViper generates a cache.Snapshot from a Viper instance
func generateSnapshotFromViper(v *viper.Viper) *cache.Snapshot {
	// Customize this function to generate the appropriate snapshot based on the configuration
	// Retrieve configuration values from the Viper instance
	clusters := v.Get("clusters").([]interface{})
	routes := v.Get("routes").([]interface{})

	// Create the necessary resources based on the configuration
	endpoints := make([]cache.Resource, 0)
	clustersResources := make([]cache.Resource, 0)
	routesResources := make([]cache.Resource, 0)
	listeners := make([]cache.Resource, 0)

	// Generate clusters
	for _, c := range clusters {
		cluster := c.(map[string]interface{})
		// Create cluster resources based on the configuration
		// ...

		clustersResources = append(clustersResources, clusterResource)
	}

	// Generate routes
	for _, r := range routes {
		route := r.(map[string]interface{})
		// Create route resources based on the configuration
		// ...

		routesResources = append(routesResources, routeResource)
	}

	// Generate the snapshot
	snapshot := cache.NewSnapshot("1", endpoints, clustersResources, routesResources, listeners)

	return &snapshot
}

// waitForTerminationSignal waits for a termination signal to gracefully shutdown the server
func waitForTerminationSignal() {
	// Customize this function to handle the termination signal (e.g., SIGINT, SIGTERM)
}

```

In this example:

- The `configDirectory` variable represents the directory containing the YAML configuration files.
- The `loadConfigurations` function loads the initial set of configurations from the YAML files in the config directory.
- The `watchConfigurations` function sets up a watcher using the `fsnotify` package to detect changes to the YAML files and reloads the configurations when a change is detected.
- The `getConfigFiles` function retrieves a list of YAML configuration files in the config directory.
- The `loadConfigurationFromFile` function loads the configuration from a YAML file and updates the cache.
- The `generateSnapshotFromViper` function

 generates a `cache.Snapshot` from a `viper.Viper` instance.
- The `waitForTerminationSignal` function is a placeholder for handling the termination signal (e.g., SIGINT, SIGTERM).

Make sure to adjust the `configDirectory` variable and customize the functions `generateSnapshotFromViper` and `waitForTerminationSignal` to fit your specific needs.

With this implementation, the xDS management server will load the initial configurations from the YAML files in the specified directory and monitor changes to the files. When a configuration file is modified, it will be reloaded, and the cache will be updated accordingly.