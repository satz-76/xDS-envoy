Certainly! Here's an example Dockerfile script for building an Envoy sidecar container in AWS ECS:

```Dockerfile
FROM envoyproxy/envoy:v1.19.1

# Copy the Envoy configuration file
COPY envoy.yaml /etc/envoy/envoy.yaml

# Expose the necessary ports for communication
EXPOSE 8080 8443

# Start Envoy with the specified configuration file
CMD ["envoy", "-c", "/etc/envoy/envoy.yaml"]
```

In this example, we're using the `envoyproxy/envoy` base image with version `v1.19.1`. The Envoy configuration file, `envoy.yaml`, will be copied to the container's `/etc/envoy/` directory. The container exposes ports `8080` and `8443` for incoming traffic.

Here's an example content for the `envoy.yaml` file:

```yaml
admin:
  access_log_path: /tmp/envoy_admin_access.log
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 9901

static_resources:
  listeners:
    - name: listener_0
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 8080
      filter_chains:
        - filters:
            - name: envoy.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: ingress_http
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: backend
                      domains:
                        - "*"
                      routes:
                        - match:
                            prefix: "/"
                          route:
                            cluster: backend_service
                            timeout: 0s
                http_filters:
                  - name: envoy.router

  clusters:
    - name: backend_service
      connect_timeout: 0.25s
      type: strict_dns
      lb_policy: round_robin
      hosts:
        - socket_address:
            address: xds-server-host
            port_value: 18000
```

In this example, we configure Envoy to listen on port `8080` (`address: 0.0.0.0:8080`) and handle incoming HTTP traffic using the HTTP connection manager filter. The `route_config` section defines a route for all domains and prefixes (`domains: ["*"]`, `prefix: "/"`), forwarding traffic to the `backend_service` cluster.

Note that you need to replace `xds-server-host` in the `hosts` section with the actual hostname or IP address of your xDS management server.

Make sure to customize the Envoy configuration file based on your specific needs and the requirements of your xDS server and application.

Remember to build and push the Docker image to your container registry and use it in your ECS task definition.